{"ast":null,"code":"/*!\n * jQuery UI Touch Punch 0.2.3\n *\n * Copyright 2011–2014, Dave Furfero\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Depends:\n *  jquery.ui.widget.js\n *  jquery.ui.mouse.js\n */\n(function ($) {\n  // Detect touch support\n  $.support.touch = 'ontouchend' in document;\n\n  // Ignore browsers without touch support\n  if (!$.support.touch) {\n    return;\n  }\n  var mouseProto = $.ui.mouse.prototype,\n    _mouseInit = mouseProto._mouseInit,\n    _mouseDestroy = mouseProto._mouseDestroy,\n    touchHandled;\n\n  /**\n   * Simulate a mouse event based on a corresponding touch event\n   * @param {Object} event A touch event\n   * @param {String} simulatedType The corresponding mouse event\n   */\n  function simulateMouseEvent(event, simulatedType) {\n    // Ignore multi-touch events\n    if (event.originalEvent.touches.length > 1) {\n      return;\n    }\n    event.preventDefault();\n    var touch = event.originalEvent.changedTouches[0],\n      simulatedEvent = document.createEvent('MouseEvents');\n\n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(simulatedType,\n    // type\n    true,\n    // bubbles                    \n    true,\n    // cancelable                 \n    window,\n    // view                       \n    1,\n    // detail                     \n    touch.screenX,\n    // screenX                    \n    touch.screenY,\n    // screenY                    \n    touch.clientX,\n    // clientX                    \n    touch.clientY,\n    // clientY                    \n    false,\n    // ctrlKey                    \n    false,\n    // altKey                     \n    false,\n    // shiftKey                   \n    false,\n    // metaKey                    \n    0,\n    // button                     \n    null // relatedTarget              \n    );\n\n    // Dispatch the simulated event to the target element\n    event.target.dispatchEvent(simulatedEvent);\n  }\n\n  /**\n   * Handle the jQuery UI widget's touchstart events\n   * @param {Object} event The widget element's touchstart event\n   */\n  mouseProto._touchStart = function (event) {\n    var self = this;\n\n    // Ignore the event if another widget is already being handled\n    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {\n      return;\n    }\n\n    // Set the flag to prevent other widgets from inheriting the touch event\n    touchHandled = true;\n\n    // Track movement to determine if interaction was a click\n    self._touchMoved = false;\n\n    // Simulate the mouseover event\n    simulateMouseEvent(event, 'mouseover');\n\n    // Simulate the mousemove event\n    simulateMouseEvent(event, 'mousemove');\n\n    // Simulate the mousedown event\n    simulateMouseEvent(event, 'mousedown');\n  };\n\n  /**\n   * Handle the jQuery UI widget's touchmove events\n   * @param {Object} event The document's touchmove event\n   */\n  mouseProto._touchMove = function (event) {\n    // Ignore event if not handled\n    if (!touchHandled) {\n      return;\n    }\n\n    // Interaction was not a click\n    this._touchMoved = true;\n\n    // Simulate the mousemove event\n    simulateMouseEvent(event, 'mousemove');\n  };\n\n  /**\n   * Handle the jQuery UI widget's touchend events\n   * @param {Object} event The document's touchend event\n   */\n  mouseProto._touchEnd = function (event) {\n    // Ignore event if not handled\n    if (!touchHandled) {\n      return;\n    }\n\n    // Simulate the mouseup event\n    simulateMouseEvent(event, 'mouseup');\n\n    // Simulate the mouseout event\n    simulateMouseEvent(event, 'mouseout');\n\n    // If the touch interaction did not move, it should trigger a click\n    if (!this._touchMoved) {\n      // Simulate the click event\n      simulateMouseEvent(event, 'click');\n    }\n\n    // Unset the flag to allow other widgets to inherit the touch event\n    touchHandled = false;\n  };\n\n  /**\n   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.\n   * This method extends the widget with bound touch event handlers that\n   * translate touch events to mouse events and pass them to the widget's\n   * original mouse event handling methods.\n   */\n  mouseProto._mouseInit = function () {\n    var self = this;\n\n    // Delegate the touch handlers to the widget's element\n    self.element.bind({\n      touchstart: $.proxy(self, '_touchStart'),\n      touchmove: $.proxy(self, '_touchMove'),\n      touchend: $.proxy(self, '_touchEnd')\n    });\n\n    // Call the original $.ui.mouse init method\n    _mouseInit.call(self);\n  };\n\n  /**\n   * Remove the touch event handlers\n   */\n  mouseProto._mouseDestroy = function () {\n    var self = this;\n\n    // Delegate the touch handlers to the widget's element\n    self.element.unbind({\n      touchstart: $.proxy(self, '_touchStart'),\n      touchmove: $.proxy(self, '_touchMove'),\n      touchend: $.proxy(self, '_touchEnd')\n    });\n\n    // Call the original $.ui.mouse destroy method\n    _mouseDestroy.call(self);\n  };\n})(jQuery);","map":{"version":3,"names":["$","support","touch","document","mouseProto","ui","mouse","prototype","_mouseInit","_mouseDestroy","touchHandled","simulateMouseEvent","event","simulatedType","originalEvent","touches","length","preventDefault","changedTouches","simulatedEvent","createEvent","initMouseEvent","window","screenX","screenY","clientX","clientY","target","dispatchEvent","_touchStart","self","_mouseCapture","_touchMoved","_touchMove","_touchEnd","element","bind","touchstart","proxy","touchmove","touchend","call","unbind","jQuery"],"sources":["d:/GitYush/FED-RF-2023-YUSH/999.개인 프로젝트2/02.구현코드/tt-app/node_modules/jquery-ui-touch-punch/jquery.ui.touch-punch.js"],"sourcesContent":["/*!\n * jQuery UI Touch Punch 0.2.3\n *\n * Copyright 2011–2014, Dave Furfero\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Depends:\n *  jquery.ui.widget.js\n *  jquery.ui.mouse.js\n */\n(function ($) {\n\n  // Detect touch support\n  $.support.touch = 'ontouchend' in document;\n\n  // Ignore browsers without touch support\n  if (!$.support.touch) {\n    return;\n  }\n\n  var mouseProto = $.ui.mouse.prototype,\n      _mouseInit = mouseProto._mouseInit,\n      _mouseDestroy = mouseProto._mouseDestroy,\n      touchHandled;\n\n  /**\n   * Simulate a mouse event based on a corresponding touch event\n   * @param {Object} event A touch event\n   * @param {String} simulatedType The corresponding mouse event\n   */\n  function simulateMouseEvent (event, simulatedType) {\n\n    // Ignore multi-touch events\n    if (event.originalEvent.touches.length > 1) {\n      return;\n    }\n\n    event.preventDefault();\n\n    var touch = event.originalEvent.changedTouches[0],\n        simulatedEvent = document.createEvent('MouseEvents');\n    \n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(\n      simulatedType,    // type\n      true,             // bubbles                    \n      true,             // cancelable                 \n      window,           // view                       \n      1,                // detail                     \n      touch.screenX,    // screenX                    \n      touch.screenY,    // screenY                    \n      touch.clientX,    // clientX                    \n      touch.clientY,    // clientY                    \n      false,            // ctrlKey                    \n      false,            // altKey                     \n      false,            // shiftKey                   \n      false,            // metaKey                    \n      0,                // button                     \n      null              // relatedTarget              \n    );\n\n    // Dispatch the simulated event to the target element\n    event.target.dispatchEvent(simulatedEvent);\n  }\n\n  /**\n   * Handle the jQuery UI widget's touchstart events\n   * @param {Object} event The widget element's touchstart event\n   */\n  mouseProto._touchStart = function (event) {\n\n    var self = this;\n\n    // Ignore the event if another widget is already being handled\n    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {\n      return;\n    }\n\n    // Set the flag to prevent other widgets from inheriting the touch event\n    touchHandled = true;\n\n    // Track movement to determine if interaction was a click\n    self._touchMoved = false;\n\n    // Simulate the mouseover event\n    simulateMouseEvent(event, 'mouseover');\n\n    // Simulate the mousemove event\n    simulateMouseEvent(event, 'mousemove');\n\n    // Simulate the mousedown event\n    simulateMouseEvent(event, 'mousedown');\n  };\n\n  /**\n   * Handle the jQuery UI widget's touchmove events\n   * @param {Object} event The document's touchmove event\n   */\n  mouseProto._touchMove = function (event) {\n\n    // Ignore event if not handled\n    if (!touchHandled) {\n      return;\n    }\n\n    // Interaction was not a click\n    this._touchMoved = true;\n\n    // Simulate the mousemove event\n    simulateMouseEvent(event, 'mousemove');\n  };\n\n  /**\n   * Handle the jQuery UI widget's touchend events\n   * @param {Object} event The document's touchend event\n   */\n  mouseProto._touchEnd = function (event) {\n\n    // Ignore event if not handled\n    if (!touchHandled) {\n      return;\n    }\n\n    // Simulate the mouseup event\n    simulateMouseEvent(event, 'mouseup');\n\n    // Simulate the mouseout event\n    simulateMouseEvent(event, 'mouseout');\n\n    // If the touch interaction did not move, it should trigger a click\n    if (!this._touchMoved) {\n\n      // Simulate the click event\n      simulateMouseEvent(event, 'click');\n    }\n\n    // Unset the flag to allow other widgets to inherit the touch event\n    touchHandled = false;\n  };\n\n  /**\n   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.\n   * This method extends the widget with bound touch event handlers that\n   * translate touch events to mouse events and pass them to the widget's\n   * original mouse event handling methods.\n   */\n  mouseProto._mouseInit = function () {\n    \n    var self = this;\n\n    // Delegate the touch handlers to the widget's element\n    self.element.bind({\n      touchstart: $.proxy(self, '_touchStart'),\n      touchmove: $.proxy(self, '_touchMove'),\n      touchend: $.proxy(self, '_touchEnd')\n    });\n\n    // Call the original $.ui.mouse init method\n    _mouseInit.call(self);\n  };\n\n  /**\n   * Remove the touch event handlers\n   */\n  mouseProto._mouseDestroy = function () {\n    \n    var self = this;\n\n    // Delegate the touch handlers to the widget's element\n    self.element.unbind({\n      touchstart: $.proxy(self, '_touchStart'),\n      touchmove: $.proxy(self, '_touchMove'),\n      touchend: $.proxy(self, '_touchEnd')\n    });\n\n    // Call the original $.ui.mouse destroy method\n    _mouseDestroy.call(self);\n  };\n\n})(jQuery);"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}